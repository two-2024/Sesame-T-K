name: 📦构建普通版本
run-name: 📦 ${{ github.actor }} @ 构建普通版本

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 1. 设置时区为中国上海
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "Current time: $(date)"

      - name: 2. 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 3. 设置 Java 环境（JDK 17 + Zulu）
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: 4. 设置 Gradle 环境（使用 wrapper）
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: 5. 授权执行 gradlew
        run: chmod +x gradlew

      - name: 6. 执行构建（构建 Normal 和 Compatible 两种 APK。）
        run: ./gradlew assembleNormalRelease assembleCompatibleRelease -Pversion=${{ github.ref_name }}

      - name: 7. 找到 APK 输出路径
        id: locate_apks
        run: |
          normal_apk=$(find app/build/outputs/apk/normal/release -name "*.apk" | head -n 1)
          compatible_apk=$(find app/build/outputs/apk/compatible/release -name "*.apk" | head -n 1)
          echo "normal_apk=$normal_apk" >> $GITHUB_OUTPUT
          echo "compatible_apk=$compatible_apk" >> $GITHUB_OUTPUT

      - name: 8. 拷贝 APK 到统一目录，准备签名
        run: |
          mkdir -p app/build/outputs/apk/all
          cp "${{ steps.locate_apks.outputs.normal_apk }}" app/build/outputs/apk/all/
          cp "${{ steps.locate_apks.outputs.compatible_apk }}" app/build/outputs/apk/all/

      - name: 9. 签名 APK
        id: sign_apks
        uses: ilharp/sign-android-release@v2
        with:
          releaseDir: app/build/outputs/apk/all
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          buildToolsVersion: 36.0.0

      - name: 10. 提取签名后 APK 的路径
        id: extract_apks
        run: |
          IFS=':' read -r -a files <<< "${{ steps.sign_apks.outputs.signedFiles }}"
          for file in "${files[@]}"; do
            if [[ "$file" == *Normal* ]]; then
              echo "signed_normal=$file" >> $GITHUB_OUTPUT
            elif [[ "$file" == *Compatible* ]]; then
              echo "signed_compatible=$file" >> $GITHUB_OUTPUT
            fi
          done

      # - name: 11. 上传 APK 产物 - Compatible
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: apk-compatible
      #     path: ${{ steps.extract_apks.outputs.signed_compatible }}

      # - name: 11. 上传 APK 产物 - Normal
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: apk-normal
      #     path: ${{ steps.extract_apks.outputs.signed_normal }}

      - name: 12. 提取文件名和版本号
        id: extract_info
        run: |
          normal_file=$(basename "${{ steps.extract_apks.outputs.signed_normal }}")
          compatible_file=$(basename "${{ steps.extract_apks.outputs.signed_compatible }}")
          # 提取版本号（以"Normal-"或"Compatible-"之后的部分为起点，以"-signed"之前的内容为终点）
          version=$(echo "$normal_file" | sed -E 's/.*-(Normal|Compatible)-(v[^-]+).*-signed\.apk/\2/')
          echo "normal_file=$normal_file" >> $GITHUB_OUTPUT
          echo "compatible_file=$compatible_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 13. 生成 SHA256 校验文件
        run: |
          sha256sum ${{ steps.extract_apks.outputs.signed_normal }} > CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.${{ env.SHORT_SHA }}-signed.apk.sha256
          sha256sum ${{ steps.extract_apks.outputs.signed_compatible }} > CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.${{ env.SHORT_SHA }}-signed.apk.sha256

      - name: 14. 获取 Git 提交信息
        id: commit_details
        run: |
          COMMIT_MESSAGE_BODY=$( \
            if [[ "${{ github.event_name }}" == "push" ]]; then \
              echo "🔨 $(git rev-list --count ${{ github.event.before }}..${{ github.event.after }}) new commits to ${{ github.repository }}:${{ github.ref_name }} ([compare view](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.event.after }}))"; \
              echo ""; \
              git log --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an" ${{ github.event.before }}..${{ github.event.after }}; \
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then \
              echo "📦 Pull Request #${{ github.event.number }} for ${{ github.repository }}: ${{ github.head_ref }} -> ${{ github.base_ref }} ([view PR](https://github.com/${{ github.repository }}/pull/${{ github.event.number }}))"; \
              echo ""; \
              echo "Commits:"; \
              git log --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}; \
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then \
              echo "⚙️ Manual workflow run on ${{ github.ref_name }} by ${{ github.actor }}"; \
              echo ""; \
              echo "Latest commit:"; \
              git log -1 --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an"; \
            else \
              echo "ℹ️ Commit information for ${{ github.event_name }} event on ${{ github.ref_name }} by ${{ github.actor }}:"; \
              echo ""; \
              git log -1 --format="  %h ([view commit](https://github.com/${{ github.repository }}/commit/%H)): %s by %an"; \
            fi \
          )
          echo "COMMIT_MESSAGE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # - name: 15. 自动打标签（例如 v2.5.8）
      #   if: startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push'
      #   run: |
      #     VERSION_TAG="v${{ steps.extract_info.outputs.version }}"
      #     echo "Creating tag: $VERSION_TAG"
      #     git tag "$VERSION_TAG"
      #     git push origin "$VERSION_TAG"

      - name: 16. 推送 Telegram 通知（分 2 次发 APK）
        if: github.ref == 'refs/heads/main'
        env:
          CHANNEL_ID: ${{ secrets.TG_CHAT_ID }}
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          NORMAL_FILE: ${{ steps.extract_apks.outputs.signed_normal }}
          COMPATIBLE_FILE: ${{ steps.extract_apks.outputs.signed_compatible }}
          COMMIT_MESSAGE: |+
            New push to github\!
            ```
            ${{ steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}
            ```by `${{ github.event.head_commit.author.name }}`
            See commit detail [here](${{ github.event.head_commit.url }})
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$NORMAL_FILE"
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$COMPATIBLE_FILE"

      # - name: 17. 发布到 GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     name: ${{ github.event.release.tag_name || steps.extract_info.outputs.version }} # 发布的名称。默认为标签名称
      #     files: |
      #       ${{ steps.extract_apks.outputs.signed_compatible }}
      #       ${{ steps.extract_apks.outputs.signed_normal }}
      #       CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.${{ env.SHORT_SHA }}-signed.apk.sha256
      #       CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.${{ env.SHORT_SHA }}-signed.apk.sha256
      #     tag_name: ${{ steps.extract_info.outputs.version}}
      #     draft: false
      #     append_body: true
      #     generate_release_notes: true
      #     body: |
      #       ## ✨What's Changed

      #       ${{ steps.commit_details.outputs.COMMIT_MESSAGE_BODY }}
      #       > ## 下载说明
      #         * Normal 为正常版本,适用于`Android 8.0`及以上的系统
      #         * Compatible 为兼容版本,适用于`Android 7.0`及以下的系统,最低支持`Android 5.1`

      #       > ~~墙内不再更新~~ 倒卖必死全家
